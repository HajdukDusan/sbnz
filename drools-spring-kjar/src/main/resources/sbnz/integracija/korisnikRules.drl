package sbnz.integracija;




import java.util.*;
import com.example.MusicRecc.model.*;
import com.example.MusicRecc.model.Pesma;
import com.example.MusicRecc.dto.*
import java.util.stream.Collectors
import java.util.stream.Stream;

global Set<Pesma> favoritePesme;
global Map<Long,Integer> simularityMap;
global Set<Pesma> songReccomend;
global Long userId;
declare Processed
  ruleName: String
end
//
//query songIsContainedIn(Pesma p)
//    Korisnik(omiljenePesme: omiljenePesme.contains(p))
//end
rule "Find korisnik favorite songs from ocene"
    agenda-group "korisnik_rules"
    salience 10
    lock-on-active true
    when
        $korisnik : Korisnik($ocene : istorijaOcena,omiljenePesme.size() == 0)
        $favoriteSongs: Set() from accumulate
        (
            Ocena($ocena: this) from $ocene,
            init
            (
                Set<Pesma> setPesama = new HashSet<Pesma>();
            ),
            action
            (
                System.out.println($korisnik.getOmiljenePesme());
                if($ocena.getOcena() > 3){
                    setPesama.add($ocena.getPesma());
                }
            ),
            result
            (
                new HashSet<>(setPesama)
            )
        )
    then
        modify($korisnik){setOmiljenePesme($favoriteSongs)}
        System.out.println("Check song points " +  $favoriteSongs);
    end


rule "Find korisnik favorite songs from slusanje"
    agenda-group "slusanje_rules"
    salience ($slusanje.getSlusanja())
    lock-on-active true
    when
        $slusanje: KorisnikSlusanjeDTO();
        not Processed(ruleName == ("Slusanje" + $slusanje.getKorisnik()));

    then
        favoritePesme.add($slusanje.getPesmaSlusanja());
        if(favoritePesme.size() >= 10){
            insert( new Processed("Slusanje" + $slusanje.getKorisnik()) );
        }
        System.out.println("Inserted songs " +  $slusanje.getPesmaSlusanja().getNaziv());
    end



rule "Combine favorite songs from slusanje and ocene"
    agenda-group "slusanje_rules"
    lock-on-active true

    when
        $korisnik: Korisnik(omiljenePesme != null);
    then
        Set<Pesma> pesme = $korisnik.getOmiljenePesme();
        for(Object p: favoritePesme){
            pesme.add((Pesma) p);
        }
        $korisnik.setOmiljenePesme(pesme);
        System.out.println($korisnik.getOmiljenePesme().size());
end
//
rule "Find simular users"
    agenda-group "simularity_rules"
    lock-on-active true

    when
        $korisnik: Korisnik(userId != null,id == userId,omiljenePesme != null);
        $other_korisnik: Korisnik(userId != null, id != userId,omiljenePesme != null);
        $simularity: Set() from accumulate
        (
            Pesma($pesma: this) from $korisnik.getOmiljenePesme(),
            init
            (
                Set<Pesma> setPesama = new HashSet<Pesma>();
            ),
            action
            (
                if($other_korisnik.getOmiljenePesme().contains($pesma)){
                    setPesama.add($pesma);
                }
            ),
            result
            (
                new HashSet<>(setPesama)
            )
        )
    then
        simularityMap.put($other_korisnik.getId(),$simularity.size());
        System.out.println("Simularity " + simularityMap);
end

rule "Find songs not in target user"
    agenda-group "simular_rules"
    lock-on-active true

    when
        $korisnik: Korisnik(userId != null,id == userId,omiljenePesme != null);
        $other_korisnik: Korisnik(userId != null, id != userId,omiljenePesme != null);
        $other_songs: Set() from accumulate
        (
            Pesma($pesma: this) from $other_korisnik.getOmiljenePesme(),
            init
            (
                Set<Pesma> setPesama = new HashSet<Pesma>();
            ),
            action
            (
                if(!$korisnik.getOmiljenePesme().contains($pesma)){
                    setPesama.add($pesma);
                }
            ),
            result
            (
                new HashSet<>(setPesama)
            )
        )
    then
//        simularityMap.put($other_korisnik.getId(),$other_songs.size());
        songReccomend.addAll($other_songs);
        System.out.println("Other songs " + $other_songs);
end
